---
title: "01_food_consumption""
format: html
---

## 1. data preparation

```{r}

rm(list = ls(all = TRUE))

# libraries needed
library(tidyverse)  # most variable creation here uses tidyverse
library(openxlsx) # for reading/writing Excel files

# 各種の関数セット読み込み
source("../myTools.R")  # プロジェクトルートから読み込む（quarto限定の処理）

# 対象とする年のリスト
yearlist <- c("2007", "2008", "2009", "2010", "2011",
"2012", "2013", "2014", "2015", "2016")
# yearlist <- c("2008")

year_current <- "2007"

# DHSデータのルートフォルダを指定
gdrive_dir <- "/Users/snakada/Library/CloudStorage/GoogleDrive-snakada@g.ecc.u-tokyo.ac.jp/マイドライブ/Peru_work/peru_enaho"

# データ保存先フォルダ
save_folder <- "/Users/snakada/Library/CloudStorage/GoogleDrive-snakada@g.ecc.u-tokyo.ac.jp/マイドライブ/Peru_work/peru_enaho/output"

# ENAHOデータのファイルリストを取得
enaho_files_list <- get_enaho_file_list(yearlist, gdrive_dir)
saveRDS(enaho_files_list, file = file.path(save_folder, "enaho_files_list.rds"))

print("open df_mod1...")
df_mod1 <- open_enaho_file(year_current, "mod1")
print("open df_mod4...")
df_mod4 <- open_enaho_file(year_current, "mod4")
print("open df_mod7...")
df_mod7 <- open_enaho_file(year_current, "mod7")
print("open df_summary...")
df_summary <- open_enaho_file(year_current, "summary")
print("open food group code")
df_food_grp <- read.xlsx(file.path(save_folder, "itemlist_expenditure_eng.xlsx"),
                          sheet = "foodlist")
df_AME <- read.xlsx(file.path(save_folder, "Human_energy_requirements.xlsx"),
                                sheet = "summary")
  

setlabels <- function(df, year, file) {
  temp_labels <- getLabelfromDF(df) %>%
  mutate(year = year, file = file) 
  return(temp_labels)
} 
var_labels <- setlabels(df_mod1, year_current, "mod1") %>%
  bind_rows(setlabels(df_mod4, year_current, "mod4")) %>%
  bind_rows(setlabels(df_mod7, year_current, "mod7")) %>%
  bind_rows(setlabels(df_summary, year_current, "summary"))

expenditure_item <- unique(df_mod7$P601A)

write.xlsx(var_labels, file = file.path(save_folder, "var_labels.xlsx"))

var_labels_eng <- read.xlsx(file.path(gdrive_dir, "output", "var_labels_eng.xlsx"))



```
## 2. 必要な関数のセット 


```{r}

# ******************************************************************************
# @title: get_familysize_ame
# @description: 世帯構成員の年齢と性別に基づく家族メンバー数（adult male equivalent）
# @param df_mod4: ENAHOのmod4データフレーム
# @return: 世帯ごとの家族メンバー数と成人男性換算のデータフレーム 
# ******************************************************************************
get_familysize_ame <- function(df_mod4, df_AME){
  # 年齢計算関数のベクトル化対応版
  calculate_age_vectorized <- function(year1, month1, year2, month2) {
    # ベクトル全体でのNA検証
    if(any(is.na(year1) | is.na(month1) | is.na(year2) | is.na(month2))) {
      warning("Some input values contain NA")
    }
    
    # 1. 暦年差
    age_years <- year2 - year1
    
    # 2. 暦月差  
    raw_months <- month2 - month1
    
    # 3. 月差の調整（ベクトル化対応）
    age_years <- ifelse(raw_months < 0, age_years - 1, age_years)
    age_months <- ifelse(raw_months < 0, raw_months + 12, raw_months)
    
    # 4. 年齢のみを返す
    return(age_years)
  }
  
  
  # 家族メンバーの計算(AMEの利用)
  df_family_size <- df_mod4 %>%
    mutate(
      P400A2 = ifelse(is.na(P400A2), "6", P400A2),
      P400A3 = ifelse(is.na(P400A3), "1990", P400A3)
    ) %>%
    mutate(
      age = calculate_age_vectorized(as.numeric(P400A3), as.numeric(P400A2), 
                          as.numeric(AÑO), as.numeric(MES)) %>%
      labelled(
        label = "Age of household members"
      ),
      sex_char = ifelse(P207 == 1, "male", "female") %>%
      labelled(
        label = "Sex of household members"
      )
    ) %>%
    # 効率的な結合を使用
    left_join(
      df_AME %>% select(age_min, age_max, sex, AEQ),
      by = c("sex_char" = "sex"),  # 正しい構文
      relationship = "many-to-many"
    ) %>%
    filter(age_min < age & age_max >= age) %>%
    group_by(row_number()) %>%
    slice(1) %>%  # 最初のマッチを選択
    ungroup() %>%
    rename(adult_male_equivalent = AEQ) %>%
    select(-age_min, -age_max, -sex_char) %>%
    summarise(
      family_size = n() %>%
        labelled(
          label = "Number of household members"
        ),
      family_size_ame = sum(adult_male_equivalent) %>%
        labelled(
          label = "Family size in Adult, Male Equivalent (AME)"
        ),
      .by = c(CONGLOME, VIVIENDA, HOGAR)
    )

  return(df_family_size)  
}
# ------関数ここまで----------------------------------------------------------
# ******************************************************************************
# @title: get_food_consumption
# @description: 世帯の1日あたり食材消費量の計算
# @param df_mod7: ENAHOのmod7データフレーム
# @return: 世帯の1日あたり食材消費量のデータフレーム
# ******************************************************************************
get_food_consumption_family <- function(df){
  df_food_consumption <- df %>%
    mutate(
      P601B2 = as.numeric(P601B2),
      P601D2 = as.numeric(P601D2)
    ) %>%
    mutate(
      # 食事消費の頻度計算
      # P601D1の処理(15日が標準の食事調査頻度)
      frequency_days = case_when(
        P601D1 == 1 ~ 15,      # Daily → 15日間毎日
        P601D1 == 2 ~ 7.5,     # Every other day → 15日間で7.5回
        P601D1 == 3 ~ 2.14,    # Weekly → 15日間で約2.14回
        P601D1 == 4 ~ 1.07,    # Biweekly → 15日間で約1.07回
        P601D1 == 5 ~ 0.5,     # Monthly → 15日間で0.5回
        P601D1 == 9 ~ 4.29,    # Twice a week → 15日間で約4.29回
        P601D1 == 10 ~ 6.43,   # Three times a week → 15日間で約6.43回
        is.na(P601D1) ~ 15,    # NA → デフォルト15日間
        TRUE ~ 15               # その他もデフォルト15日間
      ) %>%
      labelled(
        label = "Frequency of food consumption in the last 15 days"
      ),
      food_unit = case_when(
        P601D3 == 1 ~ 300,  #  bread (grams)
        P601D3 == 2 ~ 1,  #  gram
        P601D3 == 3 ~ 800,  # large sliced bread loaf
        P601D3 == 5 ~ 400,  # small sliced bread loaf
        P601D3 == 8 ~ 200,  # small sponge cake
        P601D3 == 9 ~ 1000,  # kilogram
        P601D3 == 11 ~ 1030, # liter
        P601D3 == 12 ~ 500,  # large_can(milk)
        P601D3 == 13 ~ 250,  # small_can(milk)
        P601D3 == 14 ~ 170,  # 魚缶詰
        P601D3 == 15 ~ 750,  # beer, champagne
        P601D3 == 16 ~ 750,  # beer, champagne
        P601D3 == 17 ~ 750,  # beer, champagne
        P601D3 == 24 ~ 200,  # セロリ
        P601D3 == 29 ~ 100,  # ティーバッグ
        P601D3 == 30 ~ 100,  # 魚のフィレ
        P601D3 == 32 ~ 100,  # 魚の缶詰
        TRUE ~ 1000        # default to kilogram
      ) %>%
      labelled(
        label = "Food unit for consumption quantity"
      )
    ) %>%
    mutate(
      # 食事消費量の計算
      daily_consumption = P601D2 * food_unit / frequency_days %>%
        labelled(
          label = "Daily food consumption in grams per family (not per capita)"
        ),
    ) %>%
    select(P601A, P601X, P601B1, P601B2, P601B3, P601D1, P601D2, P601D3,
           frequency_days, food_unit, daily_consumption,label_food, 
           code_food_grp, label_food_grp,
           CONGLOME, VIVIENDA, HOGAR, UBIGEO, DOMINIO, ESTRATO, FACTOR07)

  return(df_food_consumption)
}
# ------関数ここまで----------------------------------------------------------
# ******************************************************************************
# @title: get_food_consumption_capita
# @description: 世帯の食材グループ別の一人当たり1日あたり消費量の計算
# @param df_foodgrp_consumption: 世帯の食材グループ別の1日あたり消費量のデータフレーム
# @param df_family_size: 世帯ごとの家族メンバー数と成人男性換算のデータフレーム
# @return: 世帯の食材グループ別の一人当たり1日あたり消費量のデータフレーム
# ******************************************************************************
get_food_consumption_capita <- function(df_foodgrp_consumption, df_family_size){
  df_foodgrp_consumption_capita <- df_food_consumption %>%
    group_by(CONGLOME, VIVIENDA, HOGAR, UBIGEO, DOMINIO, ESTRATO, 
             FACTOR07, code_food_grp, label_food_grp) %>%
    summarise(
      total_daily_consumption = sum(daily_consumption, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    mutate(
      total_daily_consumption = ifelse(total_daily_consumption == 0, 
                                       NA, total_daily_consumption) %>%
        labelled(
          label = "Total food consumption in grams per family (not per capita)"
        )
    ) %>%
    pivot_wider(
      names_from = code_food_grp, 
      values_from = total_daily_consumption
      ) %>%
    rename(
      staple = `1`,
      vegetable = `2`,
      fruit = `3`,
      legume = `4`,
      ASF = `5`,
      dairy = `6`,
      oilfat = `7`,
      other = `8`
    ) %>% 
    summarise(
      staple = sum(staple, na.rm = TRUE),
      vegetable = sum(vegetable, na.rm = TRUE),
      fruit = sum(fruit, na.rm = TRUE),
      legume = sum(legume, na.rm = TRUE),
      ASF = sum(ASF, na.rm = TRUE),
      dairy = sum(dairy, na.rm = TRUE),
      oilfat = sum(oilfat, na.rm = TRUE),
      other = sum(other, na.rm = TRUE),
      .by = c(CONGLOME, VIVIENDA, HOGAR, UBIGEO, DOMINIO, ESTRATO, FACTOR07)
    ) %>% 
    mutate(
      staple = ifelse(staple == 0, NA, staple),
      vegetable = ifelse(vegetable == 0, NA, vegetable),
      fruit = ifelse(fruit == 0, NA, fruit),
      legume = ifelse(legume == 0, NA, legume),
      ASF = ifelse(ASF == 0, NA, ASF),
      dairy = ifelse(dairy == 0, NA, dairy),
      oilfat = ifelse(oilfat == 0, NA, oilfat),
      other = ifelse(other == 0, NA, other)
    ) 
  
  # 家族メンバー数（AME）で割って一人当たり消費量を計算
  df_foodgrp_consumption_capita <- df_foodgrp_consumption_capita %>%
    left_join(df_family_size, 
              by = c("CONGLOME", "VIVIENDA", "HOGAR")) %>%
    mutate(
      staple = staple / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (staple)"
        ),
      vegetable = vegetable / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (vegetable)"
        ),
      fruit = fruit / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (fruit)"
        ),
      legume = legume / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (legume)"
        ),
      ASF = ASF / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (animal source food)"
        ),
      dairy = dairy / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (dairy)"
        ),
      oilfat = oilfat / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (oil and fat)"
        ),
      other = other / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (other)"
        )
    )
  
  return(df_foodgrp_consumption_capita)
}

```

## 2. 世帯構成員の年齢と性別に基づく家族メンバー数（adult male equivalent）

```{r}

df_family_size <- get_familysize_ame(df_mod4, df_AME)


```

## 3. 世帯の食品群の消費量計算

```{r}
# データ準備
df_food_consumption <- df_mod7 %>% mutate(P601A = as.numeric(zap_labels(P601A))) %>%
  left_join(df_food_grp, by = c("P601A" = "code_food"))

# 食品群の家族単位の1日あたり消費量の計算
df_food_consumption <- get_food_consumption_family(df_food_consumption)

# 食品群の1人1日あたり消費量の計算
df_foodgrp_consumption_capita <- 
  get_food_consumption_capita(df_food_consumption, df_family_size)

# 地域区分の追加
cat("data processing: add region and department info...\n")
df_foodgrp_consumption_capita <- df_foodgrp_consumption_capita %>%
  mutate(
    rural_urban = case_when(
      ESTRATO %in% 1:6 ~ "1",
      ESTRATO %in% 7:8 ~ "2",
      TRUE ~ NA_character_  # NA_real_ではなくNA_character_の方が適切
     ) %>%
      labelled(
        labels = c("Urban" = "1", "Rural" = "2"),
        label = "Area: Urban or Rural"
      ),
    department = substr(UBIGEO, 1, 2)
  ) %>%
mutate(
  area = interaction(department, rural_urban, sep = ":") %>%
    labelled(
      label = "Area: Department and Urban/Rural"
    )
)

# 所得の追加
df_foodgrp_consumption_capita <- df_foodgrp_consumption_capita %>%
  left_join(
    df_summary %>%
      select(CONGLOME, VIVIENDA, HOGAR, INGHOG2D),
    by = c("CONGLOME", "VIVIENDA", "HOGAR")
  ) %>%
  rename(
    income_net = INGHOG2D
  )

cat("data processing completed.\n")
cat("Number of households in df_foodgrp_consumption_capita: ", 
    n_distinct(paste0(df_foodgrp_consumption_capita$CONGLOME, "-", 
                      df_foodgrp_consumption_capita$VIVIENDA, "-", 
                      df_foodgrp_consumption_capita$HOGAR)), "\n")

```


## 4. データ保存
```{r}


# データ保存
cat("saving data:df_food_consumption...\n")
saveRDS(df_food_consumption, file = file.path(save_folder, year_current, "df_food_consumption.rds"))

cat("saving data:df_foodgrp_consumption_capita...\n")
saveRDS(df_foodgrp_consumption_capita, file = file.path(save_folder, year_current, "df_foodgrp_consumption_capita.rds"))

# 一時データ消去
rm(df_food_consumption)

cat("all done.\n")

```

## 5. svydesignの作成

```{r}
# 必要なライブラリ
library(survey)
library(dplyr)
library(ggplot2)
library(srvyr)

# 変数群の定義
myVar <- c("staple", "vegetable", "fruit", "legume", "ASF", "dairy", "oilfat", "other")

# (1) サーベイデザインの設定
options(survey.lonely.psu = "adjust")  # 孤立PSU対策（小域での分散推定安定化）

enaho_design <- svydesign(
  id = ~ CONGLOME,
  strata = ~ ESTRATO,
  weights = ~ FACTOR07, 
  data = df_foodgrp_consumption_capita,
  nest = TRUE
)

# (2) 純所得の5分位点を取得
income_q <- svyquantile(
  ~ income_net,  
  design    = enaho_design,
  quantiles = seq(0.2, 0.8, by = 0.2),
  na.rm     = TRUE,
  ci        = FALSE
)
print(income_q)

# 所得階層の追加
df_foodgrp_consumption_capita <- df_foodgrp_consumption_capita %>%
  mutate(
    inc_quintile = case_when(
      income_net <= as.numeric(income_q$income_net[1,1]) ~ "1",
      income_net > as.numeric(income_q$income_net[1,1]) & 
        income_net <= as.numeric(income_q$income_net[1,2]) ~ "2",
      income_net > as.numeric(income_q$income_net[1,2]) & 
        income_net <= as.numeric(income_q$income_net[1,3]) ~ "3",
      income_net > as.numeric(income_q$income_net[1,3]) & 
        income_net <= as.numeric(income_q$income_net[1,4]) ~ "4",
      income_net > as.numeric(income_q$income_net[1,4]) ~ "5",
      TRUE ~ NA_character_
    ) %>%
      labelled(
        labels = c("1st quintile" = "1", "2nd quintile" = "2", 
                   "3rd quintile" = "3", "4th quintile" = "4", 
                   "5th quintile" = "5"),
        label = "Income quintile"
      )
  )

# ここでsvydesign（enaho_design）を再度作る！
enaho_design <- svydesign(
  id = ~ CONGLOME,
  strata = ~ ESTRATO,
  weights = ~ FACTOR07, 
  data = df_foodgrp_consumption_capita,
  nest = TRUE
)


```

## 6. 基本統計の取得

```{r}
# (2) svybyを使った地域×所得階層別の基本統計
# 平均の計算
area_inc_means <- svyby(
  formula = as.formula(paste("~", paste(myVar, collapse = " + "))),
  by = ~ area + inc_quintile,
  design = enaho_design,
  FUN = svymean,
  na.rm = TRUE,
  keep.var = TRUE
)

# 分散の計算
area_inc_vars <- svyby(
  formula = as.formula(paste("~", paste(myVar, collapse = " + "))),
  by = ~ area + inc_quintile,
  design = enaho_design,
  FUN = svyvar,
  na.rm = TRUE,
  keep.var = FALSE
)

# 対角要素（分散値）のみを抽出
myVar <- c("staple", "vegetable", "fruit", "legume", "ASF", "dairy", "oilfat", "other")
n_vars <- length(myVar)

# 対角要素のインデックス（1, 10, 19, 28, 37, 46, 55, 64）
diagonal_indices <- seq(1, n_vars^2, by = n_vars + 1)
variance_cols <- paste0("statistic", diagonal_indices)

# 分散値のみを選択して適切な列名に変更
area_inc_vars <- area_inc_vars %>%
  select(area, inc_quintile, all_of(variance_cols)) %>%
  rename_with(~ paste0(myVar, "_var"), .cols = all_of(variance_cols))


# (3) 欠損値と有効値の重み付き集計
# enaho_designからデータフレームと重みを取得
df_data <- model.frame(enaho_design)
weights_vec <- weights(enaho_design, "sampling")

# 各変数について地域×所得階層別の重み付き集計
area_inc_counts_list <- list()

for(var in myVar) {
  area_inc_counts_list[[var]] <- df_data %>%
    mutate(weight = weights_vec) %>%
    group_by(area, inc_quintile) %>%
    summarise(
      variable = var,
      total_weighted = sum(weight),
      valid_weighted = sum(weight * !is.na(.data[[var]])),
      na_weighted = sum(weight * is.na(.data[[var]])),
      .groups = 'drop'
    )
}

# リストを結合
area_inc_counts_df <- bind_rows(area_inc_counts_list)
area_inc_counts_df <- area_inc_counts_df %>%
  select(area, inc_quintile, variable, total_weighted, na_weighted) %>%
  pivot_wider(
    names_from = variable,
    values_from = c(total_weighted, na_weighted),
    names_sep = "_"
  )

# (4) 結果の結合
# 結果の統合と表示
# left_joinを使用してマージ
summary_stats <- area_inc_means %>%
  left_join(area_inc_vars, by = c("area", "inc_quintile")) %>%
  left_join(area_inc_counts_df, by = c("area", "inc_quintile"))
print(head(summary_stats))

rm(area_inc_means, area_inc_vars, area_inc_counts_df, area_inc_counts_list)


```

## 7. BoxPlotの作成

```{r}
# 所得階層別にボックスプロットを作成（5枚のグラフ）

# データフレームで log1p 変換済み列を用意
for(var in myVar) {
  df_foodgrp_consumption_capita[[paste0(var, "_log1p")]] <- log1p(df_foodgrp_consumption_capita[[var]])
}
# areaを因子型に変換
df_foodgrp_consumption_capita$area <- as.factor(df_foodgrp_consumption_capita$area)

# 再度svydesignを作成
enaho_design <- svydesign(
  id = ~ CONGLOME,
  strata = ~ ESTRATO,
  weights = ~ FACTOR07, 
  data = df_foodgrp_consumption_capita,
  nest = TRUE
)

for(quintile in 1:5) {
  # サブセットデザインの作成
  subset_design <- subset(enaho_design, inc_quintile == as.character(quintile))
  
  # グラフの保存先設定（PDF：マルチページ対応）
  pdf(file = file.path(save_folder, year_current, "descriptive",
                       paste0("boxplot_quintile_", quintile, ".pdf")),
      width = 12, height = 8)
  
  for(i in 1:length(myVar)) {
    var <- myVar[i]
    # 4つグラフを描画したら新しいページに切り替え
    if (i %% 4 == 1) {
      # レイアウト設定（2x2で4変数を配置）
      par(mfrow = c(2, 2), mar = c(4, 4, 3, 1))  
    }
    tryCatch({
      # 地域別ボックスプロット
      log1p_var <- paste0(var, "_log1p")
      svyboxplot(
        formula = as.formula(paste(log1p_var, "~ area")),
        design = subset_design,
        main = paste(var, "- income_quintile", quintile),
        ylab = var,
        xlab = "area",
        las = 2,  # x軸ラベルを縦書きに
        cex.axis = 0.6,  # 軸ラベルサイズ調整
        all.outliers = TRUE  # 全ての外れ値を表示
      )
    }, error = function(e) {
      plot.new()
      title(paste("error:", var, "- income_quintile", quintile))
      text(0.5, 0.5, "not enough data", cex = 1.5)
    })
  }
  
  dev.off()
  cat("income_quintile", quintile, "boxplot complete!\n")
}


```

## 8. outlierの確認と除去

```{r}
# 外れ値検出関数（調査設計考慮版）
detect_outliers_simple <- function(design, var_name, by_vars = c("area", "inc_quintile")) {
  
  # データフレームと重みを取得
  df_data <- model.frame(design)
  weights_vec <- weights(design, "sampling")
  
  # 各グループでIQRベース外れ値検出
  df_data$weight <- weights_vec
  df_data$is_outlier <- FALSE
  
  # グループごとに処理
  groups <- unique(df_data[, by_vars])
  
  for(i in 1:nrow(groups)) {
    # 該当グループのデータを抽出
    group_filter <- TRUE
    for(var in by_vars) {
      group_filter <- group_filter & (df_data[[var]] == groups[[var]][i])
    }
    
    group_data <- df_data[group_filter, ]
    group_values <- group_data[[var_name]]
    group_weights <- group_data$weight
    
    # 有効データのみ
    valid_idx <- !is.na(group_values)
    if(sum(valid_idx) < 5) next  # データ不足はスキップ
    
    valid_values <- group_values[valid_idx]
    valid_weights <- group_weights[valid_idx]
    
    # 重み付き分位数計算（簡易版）
    tryCatch({
      q25 <- weighted.quantile(valid_values, valid_weights, 0.25)
      q75 <- weighted.quantile(valid_values, valid_weights, 0.75)
      
      IQR <- q75 - q25
      lower_fence <- q25 - 1.5 * IQR
      upper_fence <- q75 + 1.5 * IQR
      
      # 外れ値フラグ設定
      outlier_idx <- group_filter & !is.na(df_data[[var_name]]) & 
                     (df_data[[var_name]] < lower_fence | df_data[[var_name]] > upper_fence)
      df_data$is_outlier[outlier_idx] <- TRUE
      
    }, error = function(e) {
      cat("Error processing group", i, "for", var_name, "\n")
    })
  }
  
  return(df_data)
}

detect_outliers_unweighted <- function(design, var_name, by_vars = c("area", "inc_quintile")) {
  df_data <- model.frame(design)
  df_data$is_outlier <- FALSE
  
  library(dplyr)
  result <- df_data %>%
    group_by(across(all_of(by_vars))) %>%
    mutate(
      q25 = quantile(.data[[var_name]], 0.25, na.rm = TRUE),
      q75 = quantile(.data[[var_name]], 0.75, na.rm = TRUE),
      IQR = q75 - q25,
      lower_fence = q25 - 1.5 * IQR,
      upper_fence = q75 + 1.5 * IQR,
      is_outlier = !is.na(.data[[var_name]]) & 
                   (.data[[var_name]] < lower_fence | .data[[var_name]] > upper_fence)
    ) %>%
    ungroup() %>%
    select(-q25, -q75, -IQR, -lower_fence, -upper_fence)
  
  return(as.data.frame(result))
}


# 全変数について外れ値を検出
outlier_results <- list()
for(var in myVar) {
  cat("外れ値検出中:", var, "\n")
  outlier_results[[var]] <- detect_outliers_unweighted(enaho_design, var)
}

# 外れ値統計のサマリー
outlier_summary <- data.frame(
  variable = myVar,
  total_obs = sapply(myVar, function(v) sum(!is.na(model.frame(enaho_design)[, v]))),
  outliers = sapply(myVar, function(v) {
    sum(outlier_results[[v]]$is_outlier, na.rm = TRUE)
  }),
  outlier_rate = sapply(myVar, function(v) {
    sum(outlier_results[[v]]$is_outlier, na.rm = TRUE) / 
    sum(!is.na(model.frame(enaho_design)[, v])) * 100
  })
)

print(outlier_summary)

# 外れ値除去版のデータセット作成
# 外れ値除去を元データで直接実行
clean_data <- model.frame(enaho_design)

for(var in myVar) {
  cat("外れ値除去中:", var, "\n")
  
  # 各変数について直接外れ値検出・除去
  clean_data <- clean_data %>%
    group_by(area, inc_quintile) %>%
    mutate(
      q25 = quantile(.data[[var]], 0.25, na.rm = TRUE),
      q75 = quantile(.data[[var]], 0.75, na.rm = TRUE),
      IQR = q75 - q25,
      lower_fence = q25 - 1.5 * IQR,
      upper_fence = q75 + 1.5 * IQR,
      !!var := ifelse(
        !is.na(.data[[var]]) & 
        (.data[[var]] < lower_fence | .data[[var]] > upper_fence),
        NA,  # 外れ値をNAに設定
        .data[[var]]  # そのまま保持
      )
    ) %>%
    ungroup() %>%
    select(-q25, -q75, -IQR, -lower_fence, -upper_fence)
}

clean_data <- as.data.frame(clean_data)

# # 外れ値除去後の調査設計オブジェクト作成
# enaho_design_clean <- update(enaho_design, . ~ ., data = clean_data)

```