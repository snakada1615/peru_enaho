---
title: "01_food_consumption""
format: html
---

## 1. data preparation

```{r}

rm(list = ls(all = TRUE))

# libraries needed
library(tidyverse)  # most variable creation here uses tidyverse
library(openxlsx) # for reading/writing Excel files

# 各種の関数セット読み込み
source("../myTools.R")  # プロジェクトルートから読み込む（quarto限定の処理）

# 対象とする年のリスト
yearlist <- c("2007", "2008", "2009", "2010", "2011",
"2012", "2013", "2014", "2015", "2016")
# yearlist <- c("2008")

# DHSデータのルートフォルダを指定
gdrive_dir <- "/Users/snakada/Library/CloudStorage/GoogleDrive-snakada@g.ecc.u-tokyo.ac.jp/マイドライブ/Peru_work/peru_enaho"

# データ保存先フォルダ
save_folder <- "/Users/snakada/Library/CloudStorage/GoogleDrive-snakada@g.ecc.u-tokyo.ac.jp/マイドライブ/Peru_work/peru_enaho/output"

# ENAHOデータのファイルリストを取得
enaho_files_list <- get_enaho_file_list(yearlist, gdrive_dir)
saveRDS(enaho_files_list, file = file.path(save_folder, "enaho_files_list.rds"))

print("open df_mod1...")
df_mod1 <- open_enaho_file("2007", "mod1")
print("open df_mod4...")
df_mod4 <- open_enaho_file("2007", "mod4")
print("open df_mod7...")
df_mod7 <- open_enaho_file("2007", "mod7")
print("open df_summary...")
df_summary <- open_enaho_file("2007", "summary")
print("open food group code")
df_food_grp <- read.xlsx(file.path(save_folder, "itemlist_expenditure_eng.xlsx"),
                          sheet = "foodlist")
df_AME <- read.xlsx(file.path(save_folder, "Human_energy_requirements.xlsx"),
                                sheet = "summary")
  

setlabels <- function(df, year, file) {
  temp_labels <- getLabelfromDF(df) %>%
  mutate(year = year, file = file) 
  return(temp_labels)
} 
var_labels <- setlabels(df_mod1, "2007", "mod1") %>%
  bind_rows(setlabels(df_mod4, "2007", "mod4")) %>%
  bind_rows(setlabels(df_mod7, "2007", "mod7")) %>%
  bind_rows(setlabels(df_summary, "2007", "summary"))

expenditure_item <- unique(df_mod7$P601A)

write.xlsx(var_labels, file = file.path(save_folder, "var_labels.xlsx"))

var_labels_eng <- read.xlsx(file.path(gdrive_dir, "output", "var_labels_eng.xlsx"))



```
## 2. 必要な関数のセット 


```{r}

# ******************************************************************************
# @title: get_familysize_ame
# @description: 世帯構成員の年齢と性別に基づく家族メンバー数（adult male equivalent）
# @param df_mod4: ENAHOのmod4データフレーム
# @return: 世帯ごとの家族メンバー数と成人男性換算のデータフレーム 
# ******************************************************************************
get_familysize_ame <- function(df_mod4, df_AME){
  # 年齢計算関数のベクトル化対応版
  calculate_age_vectorized <- function(year1, month1, year2, month2) {
    # ベクトル全体でのNA検証
    if(any(is.na(year1) | is.na(month1) | is.na(year2) | is.na(month2))) {
      warning("Some input values contain NA")
    }
    
    # 1. 暦年差
    age_years <- year2 - year1
    
    # 2. 暦月差  
    raw_months <- month2 - month1
    
    # 3. 月差の調整（ベクトル化対応）
    age_years <- ifelse(raw_months < 0, age_years - 1, age_years)
    age_months <- ifelse(raw_months < 0, raw_months + 12, raw_months)
    
    # 4. 年齢のみを返す
    return(age_years)
  }
  
  
  # 家族メンバーの計算(AMEの利用)
  df_family_size <- df_mod4 %>%
    mutate(
      P400A2 = ifelse(is.na(P400A2), "6", P400A2),
      P400A3 = ifelse(is.na(P400A3), "1990", P400A3)
    ) %>%
    mutate(
      age = calculate_age_vectorized(as.numeric(P400A3), as.numeric(P400A2), 
                          as.numeric(AÑO), as.numeric(MES)) %>%
      labelled(
        label = "Age of household members"
      ),
      sex_char = ifelse(P207 == 1, "male", "female") %>%
      labelled(
        label = "Sex of household members"
      )
    ) %>%
    # 効率的な結合を使用
    left_join(
      df_AME %>% select(age_min, age_max, sex, AEQ),
      by = c("sex_char" = "sex"),  # 正しい構文
      relationship = "many-to-many"
    ) %>%
    filter(age_min < age & age_max >= age) %>%
    group_by(row_number()) %>%
    slice(1) %>%  # 最初のマッチを選択
    ungroup() %>%
    rename(adult_male_equivalent = AEQ) %>%
    select(-age_min, -age_max, -sex_char) %>%
    summarise(
      family_size = n() %>%
        labelled(
          label = "Number of household members"
        ),
      family_size_ame = sum(adult_male_equivalent) %>%
        labelled(
          label = "Family size in Adult, Male Equivalent (AME)"
        ),
      .by = c(CONGLOME, VIVIENDA, HOGAR)
    )

  return(df_family_size)  
}
# ------関数ここまで----------------------------------------------------------
# ******************************************************************************
# @title: get_food_consumption
# @description: 世帯の1日あたり食材消費量の計算
# @param df_mod7: ENAHOのmod7データフレーム
# @return: 世帯の1日あたり食材消費量のデータフレーム
# ******************************************************************************
get_food_consumption_family <- function(df){
  df_food_consumption <- df %>%
    mutate(
      P601B2 = as.numeric(P601B2),
      P601D2 = as.numeric(P601D2)
    ) %>%
    mutate(
      # 食事消費の頻度計算
      # P601D1の処理(15日が標準の食事調査頻度)
      frequency_days = case_when(
        P601D1 == 1 ~ 15,      # Daily → 15日間毎日
        P601D1 == 2 ~ 7.5,     # Every other day → 15日間で7.5回
        P601D1 == 3 ~ 2.14,    # Weekly → 15日間で約2.14回
        P601D1 == 4 ~ 1.07,    # Biweekly → 15日間で約1.07回
        P601D1 == 5 ~ 0.5,     # Monthly → 15日間で0.5回
        P601D1 == 9 ~ 4.29,    # Twice a week → 15日間で約4.29回
        P601D1 == 10 ~ 6.43,   # Three times a week → 15日間で約6.43回
        is.na(P601D1) ~ 15,    # NA → デフォルト15日間
        TRUE ~ 15               # その他もデフォルト15日間
      ) %>%
      labelled(
        label = "Frequency of food consumption in the last 15 days"
      ),
      food_unit = case_when(
        P601D3 == 1 ~ 300,  #  bread (grams)
        P601D3 == 2 ~ 1,  #  gram
        P601D3 == 3 ~ 800,  # large sliced bread loaf
        P601D3 == 5 ~ 400,  # small sliced bread loaf
        P601D3 == 8 ~ 200,  # small sponge cake
        P601D3 == 9 ~ 1000,  # kilogram
        P601D3 == 11 ~ 1030, # liter
        P601D3 == 12 ~ 500,  # large_can(milk)
        P601D3 == 13 ~ 250,  # small_can(milk)
        P601D3 == 14 ~ 170,  # 魚缶詰
        P601D3 == 15 ~ 750,  # beer, champagne
        P601D3 == 16 ~ 750,  # beer, champagne
        P601D3 == 17 ~ 750,  # beer, champagne
        P601D3 == 24 ~ 200,  # セロリ
        P601D3 == 29 ~ 100,  # ティーバッグ
        P601D3 == 30 ~ 100,  # 魚のフィレ
        P601D3 == 32 ~ 100,  # 魚の缶詰
        TRUE ~ 1000        # default to kilogram
      ) %>%
      labelled(
        label = "Food unit for consumption quantity"
      )
    ) %>%
    mutate(
      # 食事消費量の計算
      daily_consumption = P601D2 * food_unit / frequency_days %>%
        labelled(
          label = "Daily food consumption in grams per family (not per capita)"
        ),
    ) %>%
    select(P601A, P601X, P601B1, P601B2, P601B3, P601D1, P601D2, P601D3,
           frequency_days, food_unit, daily_consumption,label_food, 
           code_food_grp, label_food_grp,
           CONGLOME, VIVIENDA, HOGAR, UBIGEO, DOMINIO, ESTRATO, FACTOR07)

  return(df_food_consumption)
}
# ------関数ここまで----------------------------------------------------------
# ******************************************************************************
# @title: get_food_consumption_capita
# @description: 世帯の食材グループ別の一人当たり1日あたり消費量の計算
# @param df_foodgrp_consumption: 世帯の食材グループ別の1日あたり消費量のデータフレーム
# @param df_family_size: 世帯ごとの家族メンバー数と成人男性換算のデータフレーム
# @return: 世帯の食材グループ別の一人当たり1日あたり消費量のデータフレーム
# ******************************************************************************
get_food_consumption_capita <- function(df_foodgrp_consumption, df_family_size){
  df_foodgrp_consumption_capita <- df_food_consumption %>%
    group_by(CONGLOME, VIVIENDA, HOGAR, UBIGEO, DOMINIO, ESTRATO, 
             FACTOR07, code_food_grp, label_food_grp) %>%
    summarise(
      total_daily_consumption = sum(daily_consumption, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    mutate(
      total_daily_consumption = ifelse(total_daily_consumption == 0, 
                                       NA, total_daily_consumption) %>%
        labelled(
          label = "Total food consumption in grams per family (not per capita)"
        )
    ) %>%
    pivot_wider(
      names_from = code_food_grp, 
      values_from = total_daily_consumption
      ) %>%
    rename(
      staple = `1`,
      vegetable = `2`,
      fruit = `3`,
      legume = `4`,
      ASF = `5`,
      dairy = `6`,
      oilfat = `7`,
      other = `8`
    ) %>% 
    summarise(
      staple = sum(staple, na.rm = TRUE),
      vegetable = sum(vegetable, na.rm = TRUE),
      fruit = sum(fruit, na.rm = TRUE),
      legume = sum(legume, na.rm = TRUE),
      ASF = sum(ASF, na.rm = TRUE),
      dairy = sum(dairy, na.rm = TRUE),
      oilfat = sum(oilfat, na.rm = TRUE),
      other = sum(other, na.rm = TRUE),
      .by = c(CONGLOME, VIVIENDA, HOGAR, UBIGEO, DOMINIO, ESTRATO, FACTOR07)
    ) %>% 
    mutate(
      staple = ifelse(staple == 0, NA, staple),
      vegetable = ifelse(vegetable == 0, NA, vegetable),
      fruit = ifelse(fruit == 0, NA, fruit),
      legume = ifelse(legume == 0, NA, legume),
      ASF = ifelse(ASF == 0, NA, ASF),
      dairy = ifelse(dairy == 0, NA, dairy),
      oilfat = ifelse(oilfat == 0, NA, oilfat),
      other = ifelse(other == 0, NA, other)
    ) 
  
  # 家族メンバー数（AME）で割って一人当たり消費量を計算
  df_foodgrp_consumption_capita <- df_foodgrp_consumption_capita %>%
    left_join(df_family_size, 
              by = c("CONGLOME", "VIVIENDA", "HOGAR")) %>%
    mutate(
      staple = staple / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (staple)"
        ),
      vegetable = vegetable / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (vegetable)"
        ),
      fruit = fruit / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (fruit)"
        ),
      legume = legume / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (legume)"
        ),
      ASF = ASF / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (animal source food)"
        ),
      dairy = dairy / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (dairy)"
        ),
      oilfat = oilfat / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (oil and fat)"
        ),
      other = other / family_size_ame %>%
        labelled(
          label = "Daily food consumption in grams per capita (other)"
        )
    )
  
  return(df_foodgrp_consumption_capita)
}

```

## 2. 世帯構成員の年齢と性別に基づく家族メンバー数（adult male equivalent）

```{r}

df_family_size <- get_familysize_ame(df_mod4, df_AME)


```

## 3. 世帯の食品群の消費量計算

```{r}
# データ準備
df_food_consumption <- df_mod7 %>% mutate(P601A = as.numeric(zap_labels(P601A))) %>%
  left_join(df_food_grp, by = c("P601A" = "code_food"))

# 食品群の家族単位の1日あたり消費量の計算
df_food_consumption <- get_food_consumption_family(df_food_consumption)

# 食品群の1人1日あたり消費量の計算
df_foodgrp_consumption_capita <- 
  get_food_consumption_capita(df_food_consumption, df_family_size)

# 地域区分の追加
cat("data processing: add region and department info...\n")
df_foodgrp_consumption_capita <- df_foodgrp_consumption_capita %>%
  mutate(
    rural_urban = case_when(
      ESTRATO %in% 1:6 ~ "1",
      ESTRATO %in% 7:8 ~ "2",
      TRUE ~ NA_character_  # NA_real_ではなくNA_character_の方が適切
     ) %>%
      labelled(
        labels = c("Urban" = "1", "Rural" = "2"),
        label = "Area: Urban or Rural"
      ),
    department = substr(UBIGEO, 1, 2)
  ) %>%
mutate(
  area = interaction(department, rural_urban, sep = ":") %>%
    labelled(
      label = "Area: Department and Urban/Rural"
    )
)

# 所得の追加
df_foodgrp_consumption_capita <- df_foodgrp_consumption_capita %>%
  left_join(
    df_summary %>%
      select(CONGLOME, VIVIENDA, HOGAR, INGHOG2D),
    by = c("CONGLOME", "VIVIENDA", "HOGAR")
  ) %>%
  rename(
    income_net = INGHOG2D
  )

cat("data processing completed.\n")
cat("Number of households in df_foodgrp_consumption_capita: ", 
    n_distinct(paste0(df_foodgrp_consumption_capita$CONGLOME, "-", 
                      df_foodgrp_consumption_capita$VIVIENDA, "-", 
                      df_foodgrp_consumption_capita$HOGAR)), "\n")

```


## 4. データ保存
```{r}


# データ保存
cat("saving data:df_food_consumption...\n")
saveRDS(df_food_consumption, file = file.path(save_folder, "2007", "df_food_consumption.rds"))

cat("saving data:df_foodgrp_consumption_capita...\n")
saveRDS(df_foodgrp_consumption_capita, file = file.path(save_folder, "2007", "df_foodgrp_consumption_capita.rds"))

# 一時データ消去
rm(df_food_consumption)

cat("all done.\n")

```

## 5. svydesignを用いた基本統計の取得

```{r}
# 必要なライブラリ
library(survey)
library(dplyr)
library(ggplot2)

# 変数群の定義
myVar <- c("staple", "vegetable", "fruit", "legume", "ASF", "dairy", "oilfat", "other")

# svybyを使った地域×所得階層別の基本統計
# 平均の計算
area_inc_means <- svyby(
  formula = as.formula(paste("~", paste(myVar, collapse = " + "))),
  by = ~ area + inc_quintile,
  design = enaho_design,
  FUN = svymean,
  na.rm = TRUE,
  keep.var = TRUE
)

# 分散の計算
area_inc_vars <- svyby(
  formula = as.formula(paste("~", paste(myVar, collapse = " + "))),
  by = ~ area + inc_quintile,
  design = enaho_design,
  FUN = svyvar,
  na.rm = TRUE
)

# データ数とNA数の計算（カスタム関数を使用）
count_function <- function(x, design) {
  total_count <- sum(weights(design))
  na_count <- sum(is.na(x) * weights(design))
  valid_count <- total_count - na_count
  return(c(total = total_count, valid = valid_count, na = na_count))
}

# 重み付きカウントの計算
get_weighted_counts <- function(design, variables) {
  results <- list()
  
  for(var in variables) {
    # 重み付き総数
    total_weighted <- svyby(
      formula = ~ I(1),  # 定数1の合計で総数を取得
      by = ~ area + inc_quintile,
      design = design,
      FUN = svytotal,
      na.rm = FALSE
    )
    
    # 有効データの重み付き数
    valid_weighted <- svyby(
      formula = as.formula(paste("~ I(!is.na(", var, "))")),
      by = ~ area + inc_quintile,
      design = design,
      FUN = svytotal,
      na.rm = FALSE
    )
    
    # 結合して整理
    combined <- merge(total_weighted, valid_weighted, 
                     by = c("area", "inc_quintile"),
                     suffixes = c("_total", "_valid"))
    combined$na_weighted <- combined$`I(1)_total` - combined[[paste0("I(!is.na(", var, "))_valid")]]
    combined$variable <- var
    
    results[[var]] <- combined
  }
  
  return(results)
}

# 使用例
# weighted_counts <- get_weighted_counts(enaho_design, myVar)


# 各変数について実行
area_inc_counts <- list()
for(var in myVar) {
  area_inc_counts[[var]] <- svyby(
    formula = as.formula(paste("~", var)),
    by = ~ area + inc_quintile,
    design = enaho_design,
    FUN = function(x, design, ...) {
      data_vec <- model.frame(design)[, var]
      total_n <- length(x)
      na_n <- sum(is.na(x))
      valid_n <- total_n - na_n
      return(c(total = total_n, valid = valid_n, na = na_n))
    }
  )
}

# 結果の統合と表示
summary_stats <- merge(area_inc_means, area_inc_vars, by = c("area", "inc_quintile"))
print(head(summary_stats))


```

## 6. 基本統計の取得

```{r}
# (6) svybyを用いた基本統計量の取得

library(survey)
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)


# (7) 全体の基本統計
overall_stats <- svymean(
  as.formula(paste("~", paste(myVar, collapse = "+"))),
  design = enaho_design,
  na.rm = TRUE
)
print("=== 全体基本統計 ===")
print(overall_stats)
print(confint(overall_stats))

# (8) クロス集計（州×都市農村×所得階層）
by_all_groups <- svyby(
  as.formula(paste("~", paste(myVar, collapse = "+"))),
  ~ area,
  design = enaho_design,
  FUN = svymean,
  na.rm = TRUE,
  vartype = c("se", "ci")
)

print("=== クロス集計統計 ===")
print(dim(by_all_groups))  # 結果の次元確認
print(head(by_all_groups, 10))  # 最初の10行のみ表示


```

## 7. グラフの作成

```{r}
# (1) boxplot（survey加重版）
create_survey_boxplots <- function(
  design, 
  variables, 
  group_var = NULL, 
  title_prefix = "") {
  
  if (is.null(group_var)) {
    # 単一boxplot
    plots <- list()
    for (var in variables) {
      formula_str <- paste0(var, " ~ 1")
      
      # 基本的なboxplot
      p <- svyboxplot(as.formula(formula_str), design, 
                      all.outliers = TRUE,
                      main = paste(title_prefix, var))
      plots[[var]] <- recordPlot()
    }
    return(plots)
  } else {
    # グループ別boxplot
    plots <- list()
    for (var in variables) {
      formula_str <- paste0(var, " ~ ", paste(group_var, collapse = "+"))
      
      p <- svyboxplot(as.formula(formula_str), design,
                      all.outliers = TRUE,
                      main = paste(title_prefix, var, "by", group_var))
      plots[[var]] <- recordPlot()
    }
    return(plots)
  }
}

# ******************************************************************************
# @title: create_boxplot
# @description: surveyデザインを用いたboxplotの作成
# @param mydesign: surveyデザインオブジェクト
# @param var: 対象変数名（文字列）
# @param group: グループ変数名のベクトル（文字列のベクトル）
# @return: boxplotの描画
# ******************************************************************************
create_boxplot_single <- function(mydesign, var, group_var) {
  formula <- as.formula(paste0(var, " ~ ", group_var))
  valid_data <- !is.na(mydesign$variables[[var]])
  
  p <- svyboxplot(
    formula,
    design = mydesign,
    subset = valid_data,
    all.outliers = TRUE,
    main = paste(var, "by", group_var)
  )
  return(p)
}
# ------関数ここまで----------------------------------------------------------
# ******************************************************************************
# @title: create_boxplot_interaction
# @description: 複数のグループ変数を結合してboxplotを作成
# @param mydesign: surveyデザインオブジェクト
# @param var: 対象変数名（文字列）
# @param group: グループ変数名のベクトル（文字列のベクトル）
# @return: boxplotの描画
# ******************************************************************************
# 複数グループを1つの結合した因子に変換してから描画
create_boxplot_interaction <- function(mydesign, var, group) {
  # 1. interactionでグループ変数を結合して新しい変数を作成
  grp_var <- paste(group, collapse = "_")
  mydesign$variables[[grp_var]] <- interaction(
    mydesign$variables[group],
    sep = ":",
    drop = TRUE
  )
  
  # 2. formula作成
  formula <- as.formula(paste0(var, " ~ ", grp_var))
  
  # 3. 対象変数のNA値を除外
  valid_data <- !is.na(mydesign$variables[[var]])
  
  # 4. svyboxplot描画
  p <- svyboxplot(
    formula,
    design = mydesign,
    subset = valid_data,
    all.outliers = TRUE,
    main = paste(var, "by", paste(group, collapse = "+"))
  )
  return(p)
}
# ------関数ここまで----------------------------------------------------------

# 使用例：
print("=== 都市農村別Boxplot作成 ===")
urban_plots <- create_boxplot_single(enaho_design, myVar[[1]], "rural_urban")

print("=== 県別Boxplot作成 ===") 
dept_plots <- create_boxplot_single(enaho_design, myVar[[1]], "department")

print("=== 所得五分位別Boxplot作成 ===")
inc_plots <- create_boxplot_single(enaho_design, myVar[[1]], "inc_quintile")

# 使用例
print("=== 都市農村×県×所得五分位 のBoxplot作成 ===")
combined_plot <- create_boxplot_interaction(
  enaho_design,
  myVar[[1]],
  mygroup
)

```