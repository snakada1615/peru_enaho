---
title: "01_food_consumption""
format: html
---

## 1. data preparation

```{r}

rm(list = ls(all = TRUE))

# libraries needed
library(tidyverse)  # most variable creation here uses tidyverse
library(openxlsx) # for reading/writing Excel files

# 各種の関数セット読み込み
source("../myTools.R")  # プロジェクトルートから読み込む（quarto限定の処理）

# 対象とする年のリスト
yearlist <- c("2007", "2008", "2009", "2010", "2011",
"2012", "2013", "2014", "2015", "2016")
# yearlist <- c("2008")

# DHSデータのルートフォルダを指定
gdrive_dir <- "/Users/snakada/Library/CloudStorage/GoogleDrive-snakada@g.ecc.u-tokyo.ac.jp/マイドライブ/Peru_work/peru_enaho"

# データ保存先フォルダ
save_folder <- "/Users/snakada/Library/CloudStorage/GoogleDrive-snakada@g.ecc.u-tokyo.ac.jp/マイドライブ/Peru_work/peru_enaho/output"

# ENAHOデータのファイルリストを取得
enaho_files_list <- get_enaho_file_list(yearlist, gdrive_dir)
saveRDS(enaho_files_list, file = file.path(save_folder, "enaho_files_list.rds"))

print("open df_mod1...")
df_mod1 <- open_enaho_file("2007", "mod1")
print("open df_mod4...")
df_mod4 <- open_enaho_file("2007", "mod4")
print("open df_mod7...")
df_mod7 <- open_enaho_file("2007", "mod7")
print("open df_summary...")
df_summary <- open_enaho_file("2007", "summary")
print("open food group code")
df_food_grp <- read.xlsx(file.path(save_folder, "itemlist_expenditure_eng.xlsx"),
                          sheet = "foodlist")
df_AME <- read.xlsx(file.path(save_folder, "Human_energy_requirements.xlsx"),
                                sheet = "summary")
  

setlabels <- function(df, year, file) {
  temp_labels <- getLabelfromDF(df) %>%
  mutate(year = year, file = file) 
  return(temp_labels)
} 
var_labels <- setlabels(df_mod1, "2007", "mod1") %>%
  bind_rows(setlabels(df_mod4, "2007", "mod4")) %>%
  bind_rows(setlabels(df_mod7, "2007", "mod7")) %>%
  bind_rows(setlabels(df_summary, "2007", "summary"))

expenditure_item <- unique(df_mod7$P601A)

write.xlsx(var_labels, file = file.path(save_folder, "var_labels.xlsx"))

var_labels_eng <- read.xlsx(file.path(gdrive_dir, "output", "var_labels_eng.xlsx"))



```
## 2. 必要な関数のセット 


```{r}

# ******************************************************************************
# @title: get_familysize_ame
# @description: 世帯構成員の年齢と性別に基づく家族メンバー数（adult male equivalent）
# @param df_mod4: ENAHOのmod4データフレーム
# @return: 世帯ごとの家族メンバー数と成人男性換算のデータフレーム 
# ******************************************************************************
get_familysize_ame <- function(df_mod4, df_AME){
  # 年齢計算関数のベクトル化対応版
  calculate_age_vectorized <- function(year1, month1, year2, month2) {
    # ベクトル全体でのNA検証
    if(any(is.na(year1) | is.na(month1) | is.na(year2) | is.na(month2))) {
      warning("Some input values contain NA")
    }
    
    # 1. 暦年差
    age_years <- year2 - year1
    
    # 2. 暦月差  
    raw_months <- month2 - month1
    
    # 3. 月差の調整（ベクトル化対応）
    age_years <- ifelse(raw_months < 0, age_years - 1, age_years)
    age_months <- ifelse(raw_months < 0, raw_months + 12, raw_months)
    
    # 4. 年齢のみを返す
    return(age_years)
  }
  
  # # AMEの計算
  # calculate_ame <- function(age1, sex1){
  #   res <- df_AME %>%
  #     filter(as.numeric(age_min) < as.numeric(age1) & 
  #              as.numeric(age_max) >= as.numeric(age1) & sex == sex1)
  #   return(res$AME[1])
  # }
  
  # 家族メンバーの計算(AMEの利用)
  df_family_size <- df_mod4 %>%
    mutate(
      P400A2 = ifelse(is.na(P400A2), "6", P400A2),
      P400A3 = ifelse(is.na(P400A3), "1990", P400A3)
    ) %>%
    mutate(
      age = calculate_age_vectorized(as.numeric(P400A3), as.numeric(P400A2), 
                          as.numeric(AÑO), as.numeric(MES)),
      sex_char = ifelse(P207 == 1, "male", "female")
    ) %>%
    # 効率的な結合を使用
    left_join(
      df_AME %>% select(age_min, age_max, sex, AEQ),
      by = c("sex_char" = "sex"),  # 正しい構文
      relationship = "many-to-many"
    ) %>%
    filter(age_min < age & age_max >= age) %>%
    group_by(row_number()) %>%
    slice(1) %>%  # 最初のマッチを選択
    ungroup() %>%
    rename(adult_male_equivalent = AEQ) %>%
    select(-age_min, -age_max, -sex_char) %>%
    summarise(
      family_size = n(),
      family_size_ame = sum(adult_male_equivalent),
      .by = c(CONGLOME, VIVIENDA, HOGAR)
    )
  
  return(df_family_size)  
}
# ------関数ここまで----------------------------------------------------------
# ******************************************************************************
# @title: get_food_consumption
# @description: 世帯の1日あたり食材消費量の計算
# @param df_mod7: ENAHOのmod7データフレーム
# @return: 世帯の1日あたり食材消費量のデータフレーム
# ******************************************************************************
get_food_consumption_family <- function(df){
  df_food_consumption <- df %>%
    mutate(
      P601B2 = as.numeric(P601B2),
      P601D2 = as.numeric(P601D2)
    ) %>%
    mutate(
      # 食事消費の頻度計算
      # P601D1の処理(15日が標準の食事調査頻度)
      frequency_days = case_when(
        P601D1 == 1 ~ 15,      # Daily → 15日間毎日
        P601D1 == 2 ~ 7.5,     # Every other day → 15日間で7.5回
        P601D1 == 3 ~ 2.14,    # Weekly → 15日間で約2.14回
        P601D1 == 4 ~ 1.07,    # Biweekly → 15日間で約1.07回
        P601D1 == 5 ~ 0.5,     # Monthly → 15日間で0.5回
        P601D1 == 9 ~ 4.29,    # Twice a week → 15日間で約4.29回
        P601D1 == 10 ~ 6.43,   # Three times a week → 15日間で約6.43回
        is.na(P601D1) ~ 15,    # NA → デフォルト15日間
        TRUE ~ 15               # その他もデフォルト15日間
      ),
      food_unit = case_when(
        P601D3 == 1 ~ 300,  #  bread (grams)
        P601D3 == 2 ~ 1,  #  gram
        P601D3 == 3 ~ 800,  # large sliced bread loaf
        P601D3 == 5 ~ 400,  # small sliced bread loaf
        P601D3 == 8 ~ 200,  # small sponge cake
        P601D3 == 9 ~ 1000,  # kilogram
        P601D3 == 11 ~ 1030, # liter
        P601D3 == 12 ~ 500,  # large_can(milk)
        P601D3 == 13 ~ 250,  # small_can(milk)
        P601D3 == 14 ~ 170,  # 魚缶詰
        P601D3 == 15 ~ 750,  # beer, champagne
        P601D3 == 16 ~ 750,  # beer, champagne
        P601D3 == 17 ~ 750,  # beer, champagne
        P601D3 == 24 ~ 200,  # セロリ
        P601D3 == 29 ~ 100,  # ティーバッグ
        P601D3 == 30 ~ 100,  # 魚のフィレ
        P601D3 == 32 ~ 100,  # 魚の缶詰
        TRUE ~ 1000        # default to kilogram
      )
    ) %>%
    mutate(
      # 食事消費量の計算
      daily_consumption = P601D2 * food_unit / frequency_days
    ) %>%
    select(P601A, P601X, P601B1, P601B2, P601B3, P601D1, P601D2, P601D3,
           frequency_days, food_unit, daily_consumption,label_food, 
           code_food_grp, label_food_grp,
           CONGLOME, VIVIENDA, HOGAR, UBIGEO, DOMINIO, ESTRATO, FACTOR07)

  return(df_food_consumption)
}
# ------関数ここまで----------------------------------------------------------
# ******************************************************************************
# @title: get_food_consumption_capita
# @description: 世帯の食材グループ別の一人当たり1日あたり消費量の計算
# @param df_foodgrp_consumption: 世帯の食材グループ別の1日あたり消費量のデータフレーム
# @param df_family_size: 世帯ごとの家族メンバー数と成人男性換算のデータフレーム
# @return: 世帯の食材グループ別の一人当たり1日あたり消費量のデータフレーム
# ******************************************************************************
get_food_consumption_capita <- function(df_foodgrp_consumption, df_family_size){
  df_foodgrp_consumption_capita <- df_food_consumption %>%
    group_by(CONGLOME, VIVIENDA, HOGAR, UBIGEO, DOMINIO, ESTRATO, 
             FACTOR07, code_food_grp, label_food_grp) %>%
    summarise(
      total_daily_consumption = sum(daily_consumption, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    mutate(
      total_daily_consumption = ifelse(total_daily_consumption == 0, 
                                       NA, total_daily_consumption)
    ) %>%
    pivot_wider(
      names_from = code_food_grp, 
      values_from = total_daily_consumption
      ) %>%
    rename(
      staple = `1`,
      vegetable = `2`,
      fruit = `3`,
      legume = `4`,
      ASF = `5`,
      dairy = `6`,
      oilfat = `7`,
      other = `8`
    ) %>% 
    summarise(
      staple = sum(staple, na.rm = TRUE),
      vegetable = sum(vegetable, na.rm = TRUE),
      fruit = sum(fruit, na.rm = TRUE),
      legume = sum(legume, na.rm = TRUE),
      ASF = sum(ASF, na.rm = TRUE),
      dairy = sum(dairy, na.rm = TRUE),
      oilfat = sum(oilfat, na.rm = TRUE),
      other = sum(other, na.rm = TRUE),
      .by = c(CONGLOME, VIVIENDA, HOGAR, UBIGEO, DOMINIO, ESTRATO, FACTOR07)
    ) %>% 
    mutate(
      staple = ifelse(staple == 0, NA, staple),
      vegetable = ifelse(vegetable == 0, NA, vegetable),
      fruit = ifelse(fruit == 0, NA, fruit),
      legume = ifelse(legume == 0, NA, legume),
      ASF = ifelse(ASF == 0, NA, ASF),
      dairy = ifelse(dairy == 0, NA, dairy),
      oilfat = ifelse(oilfat == 0, NA, oilfat),
      other = ifelse(other == 0, NA, other)
    )
  
  # 家族メンバー数（AME）で割って一人当たり消費量を計算
  df_foodgrp_consumption_capita <- df_foodgrp_consumption_capita %>%
    left_join(df_family_size, 
              by = c("CONGLOME", "VIVIENDA", "HOGAR")) %>%
    mutate(
      staple = staple / family_size_ame,
      vegetable = vegetable / family_size_ame,
      fruit = fruit / family_size_ame,
      legume = legume / family_size_ame,
      ASF = ASF / family_size_ame,
      dairy = dairy / family_size_ame,
      oilfat = oilfat / family_size_ame,
      other = other / family_size_ame
    )
  
  return(df_foodgrp_consumption_capita)
}

```

## 2. 世帯構成員の年齢と性別に基づく家族メンバー数（adult male equivalent）

```{r}

df_family_size <- get_familysize_ame(df_mod4, df_AME)


```

## 3. 世帯の食品群の消費量計算

```{r}
# データ準備
df_food_consumption <- df_mod7 %>% mutate(P601A = as.numeric(zap_labels(P601A))) %>%
  left_join(df_food_grp, by = c("P601A" = "code_food"))

# 食材ごとの1日あたり消費量の計算
df_food_consumption <- get_food_consumption_family(df_food_consumption)

# 世帯ごとの食材グループ別の1日あたり消費量の計算
df_foodgrp_consumption_capita <- 
  get_food_consumption_capita(df_food_consumption, df_family_size)

cat("data processing completed.\n")
cat("Number of households in df_foodgrp_consumption_capita: ", 
    n_distinct(paste0(df_foodgrp_consumption_capita$CONGLOME, "-", 
                      df_foodgrp_consumption_capita$VIVIENDA, "-", 
                      df_foodgrp_consumption_capita$HOGAR)), "\n")

```


## 4. データ保存
```{r}


# データ保存
cat("saving data:df_food_consumption...\n")
saveRDS(df_food_consumption, file = file.path(save_folder, "2007", "df_food_consumption.rds"))

cat("saving data:df_foodgrp_consumption_capita...\n")
saveRDS(df_foodgrp_consumption_capita, file = file.path(save_folder, "2007", "df_foodgrp_consumption_capita.rds"))

# 一時データ消去
rm(df_food_consumption)

cat("all done.\n")

```

## 5. データクリンナップ

```{r}
# 必要なライブラリ
library(ggplot2)
library(gridExtra)  # 複数プロットの配置用

# 基本統計量の確認
myVar <- c("staple", "vegetable", "fruit", "legume", "ASF", "dairy", "oilfat", "other")

summary(df_foodgrp_consumption_capita[myVar])

# より詳細な統計量（psych package使用）
library(psych)
describe(df_foodgrp_consumption_capita[myVar])

# データをlong形式に変換
df_long <- df_foodgrp_consumption_capita %>%
  select(myVar) %>%
  pivot_longer(cols = everything(), 
               names_to = "variable", 
               values_to = "value")

# 複数変数のボックスプロット
p1 <- ggplot(df_long, aes(x = variable, y = value)) +
  geom_boxplot(fill = "lightblue", alpha = 0.7) +
  theme_minimal() +
  labs(title = "Box Plots of Food Consumption Variables",
       x = "Variables", y = "Consumption (g/day/person)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

print(p1)


# 複数変数のヒストグラム（パネル分割）
p2 <- ggplot(df_long, aes(x = value)) +
  geom_histogram(bins = 30, fill = "skyblue", color = "white", alpha = 0.7) +
  facet_wrap(~ variable, scales = "free", ncol = 3) +
  theme_minimal() +
  labs(title = "Histograms of Food Consumption Variables",
       x = "Consumption (g/day/person)", y = "Frequency")

print(p2)

# 複数変数の密度曲線（重ね合わせ）
p3 <- ggplot(df_long, aes(x = value, fill = variable)) +
  geom_density(alpha = 0.5) +
  theme_minimal() +
  labs(title = "Density Plots of Food Consumption Variables",
       x = "Consumption (g/day/person)", y = "Density") +
  theme(legend.position = "bottom")

print(p3)

# 個別の密度曲線（パネル分割）
p4 <- ggplot(df_long, aes(x = value)) +
  geom_density(fill = "orange", alpha = 0.6) +
  facet_wrap(~ variable, scales = "free", ncol = 3) +
  theme_minimal() +
  labs(title = "Individual Density Plots",
       x = "Consumption (g/day/person)", y = "Density")

print(p4)

# ヒストグラム上に密度曲線を重ねる
p5 <- ggplot(df_long, aes(x = value)) +
  geom_histogram(aes(y = after_stat(density)), 
                 bins = 30, fill = "lightgray", color = "white", alpha = 0.7) +
  geom_density(color = "red", size = 1) +
  facet_wrap(~ variable, scales = "free", ncol = 3) +
  theme_minimal() +
  labs(title = "Histograms with Density Overlay",
       x = "Consumption (g/day/person)", y = "Density")

print(p5)


# 外れ値の詳細確認
outlier_analysis <- function(x) {
  Q1 <- quantile(x, 0.25, na.rm = TRUE)
  Q3 <- quantile(x, 0.75, na.rm = TRUE)
  IQR <- Q3 - Q1
  lower_bound <- Q1 - 1.5 * IQR
  upper_bound <- Q3 + 1.5 * IQR
  
  outliers <- x[x < lower_bound | x > upper_bound]
  return(list(outliers = outliers, 
              count = length(outliers),
              percentage = length(outliers)/length(x)*100))
}

# 各変数の外れ値確認
outlier_summary <- sapply(myVar, function(var) {
  result <- outlier_analysis(df_foodgrp_consumption_capita[[var]])
  paste0(result$count, " outliers (", round(result$percentage, 1), "%)")
}, simplify = TRUE)

print(outlier_summary)


```